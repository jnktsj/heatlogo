#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2012, 2013 Junko Tsuji

# Extract specific sequence chunk from full length sequences,
# and display multi-track sequence logos.

# built-in modules
import sys, re
import os.path, commands, string

from corebio.seq import unambiguous_protein_alphabet
from corebio.utils.deoptparse import DeOptionParser
from optparse import OptionGroup

from weblogolib import LogoOptions, LogoData, LogoFormat, writePssm
from weblogolib import std_units, formatters, png_print_formatter
from weblogolib import pdf_formatter, eps_formatter, jpeg_formatter
from weblogolib import png_formatter, svg_formatter, txt_formatter
from weblogolib import heat_color_schemes
from weblogolib.colorscheme import hydrophobicity

from sslogolib.ssfunc import formatOptions
from sslogolib.ssvals import physichem_color_schemes
from sslogolib.ssvals import structure_alphabet
from sslogolib.ssdump import packData


# option parser
def buildOptionParser():
    usage = "Usage: %prog [options] StartPosition EndPosition"
    description = "Extract specific sequence chunks and display HeatLogoSS"
    op = DeOptionParser(usage=usage, description=description,
                        add_verbose_options = False)

    dm_grp = OptionGroup(op, "Dumped Files Generated By HeatLogoSS")
    io_grp = OptionGroup(op, "Input/Output Options")
    aa_grp = OptionGroup(op, "Sequence HeatLogo Options")
    st_grp = OptionGroup(op, "Structure HeatLogo Options")

    op.add_option_group(dm_grp)
    op.add_option_group(io_grp)
    op.add_option_group(aa_grp)
    op.add_option_group(st_grp)

    # strings used in help messages
    color_choices = heat_color_schemes.keys()
    color_choices.sort()

    # ============ Dumped Files Generated By HeatLogoSS ============ #
    dm_grp.add_option("", "--aa-dump",
        dest="aa_dump",
        action="store",
        type="string",
        default=None,
        help="Protein sequence dumped data generated by heatlogoSS",
        metavar="FILE")

    dm_grp.add_option("", "--st-dump",
        dest="st_dump",
        action="store",
        type="string",
        default=None,
        help="Disorder and secondary structure dumped data generated by heatlogoSS",
        metavar="FILE")
    # ============              IO Options              ============ #
    io_grp.add_option("-o", "--output",
        dest="output",
        default="out",
        help="Output file (default: %default)",
        metavar="FILENAME")

    io_grp.add_option("-F", "--output-format",
        dest="formatter",
        action="store",
        metavar="FORMAT",
        help="Format of output: eps (default), png, png_print, pdf, jpeg, svg, logodata. A comma-separated string (e.g. eps,png,jpeg) generates multiple format at once.",
        default="eps")

    # ============      Sequence HeatLogo Options       ============ #
    aa_grp.add_option("", "--aa-pwm-prob",
        dest="aa_pwm_prob",
        action="store",
        type="string",
        metavar="FILENAME",
        default=None,
        help="Output position weight matrix composed of logarithmic probabilities")

    aa_grp.add_option("", "--aa-pwm-pval",
        dest="aa_pwm_pval",
        action="store",
        type="string",
        metavar="FILENAME",
        default=None,
        help="Output position weight matrix of P-values")

    aa_grp.add_option("", "--aa-quench",
        dest="aa_quench",
        action="store_true",
        help="Turn off heatmap color-coding, and display 'normal' sequence logo colored by each symbol",
        default=False)

    aa_grp.add_option("", "--aa-units",
        dest="aa_units",
        action="store",
        metavar="UNIT",
        choices=std_units.keys(),
        type="choice",
        help="A unit of entropy ('bits' (default), 'nats', 'digits'), or a unit of free energy ('kT', 'kJ/mol', 'kcal/mol'), or 'probability' for probabilities",
        default="bits")

    aa_grp.add_option("", "--aa-heat-scheme",
        dest="aa_heat_scheme",
        action="store",
        type="dict",
        choices=heat_color_schemes,
        metavar="SCHEME",
        default=heat_color_schemes['thermography'],
        help="Specify a heatmap color scheme to color-code over/under-representation of amino acids (%s)" % \
             ", ".join(color_choices))

    aa_grp.add_option("", "--aa-hide-colorkey",
        dest="aa_show_colorkey",
        action="store_false",
        help="Toggle switch to hide a heatmap color key on the right side of a sequence logo (default: off)",
        default=True)

    aa_grp.add_option("", "--aa-title",
        dest="aa_title",
        action="store",
        type="string",
        help="Logo title text",
        default = "",
        metavar="TEXT")

    aa_grp.add_option("", "--aa-show-xaxis",
        dest="aa_show_xaxis",
        action="store_false",
        help="Display seqeunce numbers along X-axis? (default: on)",
        default=True)

    aa_grp.add_option("", "--aa-xlabel",
        dest="aa_xaxis_label",
        action="store",
        type="string",
        default="",
        help="X-axis label",
        metavar="TEXT")

    aa_grp.add_option("", "--aa-yaxis",
        dest="aa_yaxis_scale",
        action="store",
        type="float",
        help="Hight of Y-axis in units (default: maximum value with uninformative prior)",
        metavar="UNIT")

    aa_grp.add_option("", "--aa-show-yaxis",
        dest="aa_show_yaxis",
        action="store_false",
        help="Display entropy scale along Y-axis? (default: on)",
        default=True)

    aa_grp.add_option("", "--aa-ylabel",
        dest="aa_yaxis_label",
        action="store",
        type="string",
        default=None,
        help="Y-axis label",
        metavar="TEXT")

    aa_grp.add_option("", "--aa-ticmarks",
        dest="aa_yaxis_tic_interval",
        action="store",
        type="float",
        default=1,
        help="Distance between ticmarks (default: %default)",
        metavar="NUMBER")

    aa_grp.add_option("", "--aa-errorbars",
        dest="aa_show_errorbars",
        action="store_false",
        help="Hide error bars",
        default=True)

    # ============      Structure HeatLogo Options      ============ #
    st_grp.add_option("", "--st-pwm-prob",
        dest="st_pwm_prob",
        action="store",
        type="string",
        metavar="FILENAME",
        default=None,
        help="Output position weight matrix composed of structure prediction probabilities")
    st_grp.add_option("", "--st-title",
        dest="st_title",
        action="store",
        type="string",
        help="Logo title text",
        default = "",
        metavar="TEXT")

    st_grp.add_option("", "--st-show-xaxis",
        dest="st_show_xaxis",
        action="store_false",
        help="Display seqeunce numbers along X-axis? (default: on)",
        default=True)

    st_grp.add_option("", "--st-xlabel",
        dest="st_xaxis_label",
        action="store",
        type="string",
        default="",
        help="X-axis label",
        metavar="TEXT")

    st_grp.add_option("", "--st-yaxis",
        dest="st_yaxis_scale",
        action="store",
        type="float",
        help="Hight of Y-axis in units (default: maximum value with uninformative prior)",
        metavar="UNIT")

    st_grp.add_option("", "--st-show-yaxis",
        dest="st_show_yaxis",
        action="store_false",
        help="Display entropy scale along Y-axis? (default: on)",
        default=True)

    st_grp.add_option("", "--st-ylabel",
        dest="st_yaxis_label",
        action="store",
        type="string",
        default=None,
        help="Y-axis label",
        metavar="TEXT")

    st_grp.add_option("", "--st-ticmarks",
        dest="st_yaxis_tic_interval",
        action="store",
        type="float",
        default=1,
        help="Distance between ticmarks (default: %default)",
        metavar="NUMBER")

    return op


# check arguments
def checkArguments(opts, args):
    # check arguments
    if len(args) != 2:
        raise Exception("give me start and end positions")
    if not args[0].isdigit():
        raise Exception("can't interpret: " + args[0])
    if not args[1].isdigit():
        raise Exception("can't interpret: " + args[1])

    # check logo data sources
    if opts.aa_dump and not os.path.exists(opts.aa_dump):
        raise Exception("can't find sequence alignment in: "
                        + opts.aa_dump)
    if opts.st_dump and not os.path.exists(opts.st_dump):
        raise Exception("can't find secondary structure prediction data in: "
                        + opts.st_dump)

# main function
written = []
def main(prog, opts, args):

    # formatter extensions
    deformatters = {
     eps_formatter:       '.eps',
     pdf_formatter:       '.pdf',
     png_formatter:       '.png',
     png_print_formatter: '.png',
     jpeg_formatter:      '.jpg',
     svg_formatter:       '.svg',
     txt_formatter:       '.txt'
    }

    checkArguments(opts, args)
    beg, end = map(int, args[:2])

    # modify basic options
    logoOpts = LogoOptions()
    logoOpts.show_fineprint  = False
    logoOpts.scale_width     = False
    logoOpts.logo_start      = beg
    logoOpts.logo_end        = end
    logoOpts.first_index     = beg
    logoOpts.stacks_per_line = 100000

    ex = []
    formatter = []
    for formatter_string in opts.formatter.split(","):
        formatter_string = formatter_string.replace(" ", "")
        if formatter_string == "":
            continue
        if formatter_string not in formatters:
            raise Exception(formatter_string + " is not supported as the output format")
        formatter.append(formatters[formatter_string])
        ex.append(deformatters[formatters[formatter_string]])                              

    # temporary logo files
    output = opts.output
    aaOutput = []
    stOutput = []
    finalOutput = []
    for i in range(len(formatter)):
        aaOutput.append(output + "_aaChunk" + ex[i])
        stOutput.append(output + "_stChunk" + ex[i])
        finalOutput.append(output + ex[i])

    if opts.aa_dump:
        aaList = [opts.aa_units,              opts.aa_heat_scheme,
                  opts.aa_quench,             opts.aa_show_colorkey,
                  opts.aa_title,              opts.aa_show_xaxis,
                  opts.aa_show_yaxis,         opts.aa_yaxis_scale,
                  opts.aa_xaxis_label,        opts.aa_yaxis_label,
                  opts.aa_yaxis_tic_interval, opts.aa_show_errorbars]
        aaOpts = formatOptions(logoOpts, aaList, hydrophobicity)
        aaData = packData(opts.aa_dump, unambiguous_protein_alphabet, beg, end)

        aaFormat = LogoFormat(aaData, aaOpts)
                                                                                                                                          
        for i in range(len(formatter)):
            fout = open(aaOutput[i], "w")
            formatter[i](aaData, aaFormat, fout)
            written.append([aaOutput[i]])

        if opts.aa_pwm_prob:
            aaPssm = opts.aa_pwm_prob
            writePssm(aaData, aaFormat, aaPssm)
        if opts.aa_pwm_pval:
            aaPssm = opts.aa_pwm_pval
            writePssm(aaData, aaFormat, aaPssm, True)

    if opts.st_dump:
        stList = ["probability",              opts.aa_heat_scheme,
                  True,                       False,
                  opts.st_title,              opts.st_show_xaxis,
                  opts.st_show_yaxis,         opts.st_yaxis_scale,
                  opts.st_xaxis_label,        opts.st_yaxis_label,
                  opts.st_yaxis_tic_interval, False]
        stOpts = formatOptions(logoOpts, stList, None)
        stData = packData(opts.st_dump, structure_alphabet, beg, end)
        stFormat = LogoFormat(stData, stOpts)
        if opts.aa_show_colorkey == True:
            stFormat.line_margin_right += stFormat.char_width + stFormat.fontsize * 2
            stFormat.line_width  = (stFormat.stack_width * stFormat.stacks_per_line +
                                    stFormat.line_margin_left + stFormat.line_margin_right )
            stFormat.logo_width = int(2 * stFormat.logo_margin + stFormat.line_width )      

        for i in range(len(formatter)):
            fout = open(stOutput[i], "w")
            formatter[i](stData, stFormat, fout, False)
            written[i].append(stOutput[i])

        if opts.st_pwm_prob:
            stPssm = opts.st_pwm_prob
            writePssm(stData, stFormat, stPssm, False, True)

    return finalOutput


# merge ~3 track(s) to one
def merge(written, montage, outfile):
    success = []
    pat = re.compile("No such file or directory", re.I)
    for i in range(len(written)):
        L = len(written[i])
        params = " -tile 1x" + str(L) + " -geometry +1200 "
        if not L:
            raise Exception("need data dump file(s)")
        if L > 1:
            files =" ".join(written[i])
            commands.getoutput(montage + " " + files + params + outfile[i])
            if pat.findall(commands.getoutput("ls " + outfile[i])):
                success.append(False)
            else:
                success.append(True)
        else:
            commands.getoutput("mv " + " ".join(written[i]) + " " + outfile[i])
            success.append(True)
    return success


# clean up function
def clean(success, files):
    flag = False
    for i in range(len(success)):
        if success == True:
            commands.getoutput("rm " + " ".join(files[i]))
        else:
            sys.stderr.write("merge failed, separate figures are generated: "+" ".join(files[i])+"\n")


if __name__ == "__main__":

    prog = os.path.basename(sys.argv[0])
    op = buildOptionParser()
    if not len(sys.argv[1:]):
        sys.exit(prog + ": error: need more arguments")
    (opts, args) = op.parse_args(sys.argv[1:])

    try:
        outfile = main(prog, opts, args)
        montage = commands.getoutput("which montage")
        if written:
            success = merge(written, montage, outfile)
            clean(success, written)
    except KeyboardInterrupt: pass
    except Exception, e:
        sys.exit(prog + ": error :" + str(e))
